{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Messages/Messages.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Messages","message","text","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","addMessageArea","component","Textarea","validate","required","placeholder","sendBtn","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","key","messagesElements","messagesData","dispatch","isAuth","dialogs","dialogsItems","messages","values","sendMessage","msgValue","compose","connect","addMessageActionCreator","WithAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,KAAO,sBAAsB,SAAW,0BAA0B,MAAQ,uBAAuB,eAAiB,gCAAgC,QAAU,2B,8FCYzXC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAS,UAAOC,IAAEC,OAAT,YAAmBD,IAAEE,SAC3B,kBAAC,IAAD,CAASC,GAAMN,GAAOD,EAAMQ,QCG7BC,EANE,SAACT,GACd,OACI,yBAAKG,UAAWC,IAAEM,SAAUV,EAAMW,O,0CCGtCC,EAAeC,YAAiB,KAmD9BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAjBL,SAACf,GACtB,OACE,0BAAMiB,SAAUjB,EAAMkB,cACpB,6BACE,kBAACC,EAAA,EAAD,CACEhB,UAAWC,IAAEgB,eACbC,UAAWC,IACXC,SAAU,CAACC,IAAUZ,GACrBJ,KAAK,WACLiB,YAAY,uBAEd,4BAAQtB,UAAWC,IAAEsB,SAArB,aAQOC,EAnDC,SAAC3B,GACf,IAAI4B,EAAQ5B,EAAM6B,YAGdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAC3B,GAAD,OAC1C,kBAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAMN,GAAIG,EAAOH,GAAI+B,IAAK5B,EAAOH,QAExDgC,EAAmBN,EAAMO,aAAaH,KAAI,SAACtB,GAAD,OAC5C,kBAAC,EAAD,CACEC,KAAMD,EAAQA,QACd0B,SAAUpC,EAAMoC,SAChBH,IAAKvB,EAAQR,QAQjB,OAAoB,IAAjBF,EAAMqC,OACA,kBAAC,IAAD,CAAU9B,GAAG,WAIpB,yBAAKJ,UAAWC,IAAEkC,SAChB,yBAAKnC,UAAWC,IAAEmC,cAAeT,GACjC,yBAAK3B,UAAWC,IAAEoC,UAAWN,GAC7B,kBAACpB,EAAD,CAAqBG,SAZL,SAACwB,GACnBzC,EAAM0C,YAAYD,EAAOE,e,uBC0CdC,sBACXC,aAfkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACO,GACtB,MAAO,CACHM,YAAa,SAACC,GACVP,EAASU,YAAwBH,SAOzCI,IAFWH,CAGbjB","file":"static/js/4.e559ee1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__qB2ZT\",\"dialog\":\"Dialogs_dialog__3QFTu\",\"dialogsItems\":\"Dialogs_dialogsItems__1J4BY\",\"active\":\"Dialogs_active__3GFC_\",\"messages\":\"Dialogs_messages__vSq0e\",\"message\":\"Dialogs_message__36Cd-\",\"btns\":\"Dialogs_btns__1i7yz\",\"btnsMath\":\"Dialogs_btnsMath__1XXla\",\"btnEq\":\"Dialogs_btnEq__WDLlX\",\"addMessageArea\":\"Dialogs_addMessageArea__2Ptd3\",\"sendBtn\":\"Dialogs_sendBtn__1qgY0\"};","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../../Dialogs/Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className = {`${s.dialog} ${s.active}`}>\r\n                <NavLink to = {path}>{props.name}</NavLink>\r\n                </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\nconst Messages = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.text}</div>\r\n    );\r\n}\r\n\r\nexport default Messages;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nimport { required, maxLengthCreator } from \"../../Utils/Validators/validators\";\r\nimport { Textarea } from \"../Common/FormsControl/FormsControl\";\r\n\r\nlet maxLength100 = maxLengthCreator(100);\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  // let state = props.store.getState().dialogsPage;\r\n\r\n  let dialogsElements = state.dialogsData.map((dialog) => (\r\n    <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />\r\n  ));\r\n  let messagesElements = state.messagesData.map((message) => (\r\n    <Messages\r\n      text={message.message}\r\n      dispatch={props.dispatch}\r\n      key={message.id}\r\n    />\r\n  ));\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.msgValue)\r\n  };\r\n\r\n  if(props.isAuth === false) {\r\n    return <Redirect to='/login'></Redirect>\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>{messagesElements}</div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field \r\n          className={s.addMessageArea}\r\n          component={Textarea} \r\n          validate={[required, maxLength100]}\r\n          name=\"msgValue\" \r\n          placeholder=\"Enter your message\" />\r\n        \r\n        <button className={s.sendBtn}>SEND</button>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { addMessageActionCreator } from '../../redux/dialogsReducer';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { WithAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n\r\n//     let state = props.store.getState().dialogsPage;\r\n\r\n//     // let sendText = React.createRef();\r\n\r\n//     // let sendNumber = React.createRef();\r\n//     // let sendNumber2 = React.createRef();\r\n\r\n//     // let calc = () => {\r\n//     //     let inputValue = +sendNumber.current.value;\r\n//     //     let inputValue2 = +sendNumber2.current.value;\r\n//     //     let just = inputValue + inputValue2;\r\n//     //     alert(just);\r\n//     // }\r\n\r\n//     let addMsg = () => {\r\n//         // let newMsg = sendText.current.value;\r\n//         props.store.dispatch(addMessageActionCreator());\r\n//     }\r\n\r\n//     let onMsgChange = (text) => {\r\n//         // let text = sendText.current.value;\r\n//         // let action = { type: 'UPDATE-MESSAGE', newMsg: text};\r\n//         // let text = e.target.value;\r\n//         props.store.dispatch(updateNewMessageActionCreator(text));\r\n//       }\r\n\r\n//     // let dialogsElements = \r\n//     //     props.state.dialogsData.map( (dialog) =>  <DialogItem name = {dialog.name} id={dialog.id} />);\r\n\r\n//     // let messagesElements = \r\n//     //     props.state.messagesData.map( (message) =>  <Messages text = {message.message}  \r\n//     //                                                           dispatch = {props.dispatch} \r\n//     //                                                         //   msgValue={props.dialogsPage.msgValue}\r\n//     //                                                         //   updateNewMsg = {props.updateNewMsg}\r\n//     //                                                           />)\r\n\r\n\r\n//     return (\r\n//         <Dialogs \r\n//             updateNewMessage={onMsgChange}\r\n//             sendMessage={addMsg}\r\n//             dialogsPage={state}/>\r\n//     );\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (msgValue) => {\r\n            dispatch(addMessageActionCreator(msgValue));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n\r\n//let AuthRedirectComponent = WithAuthRedirect(Dialogs); // это HOC\r\n\r\n\r\n"],"sourceRoot":""}